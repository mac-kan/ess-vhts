<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="LightShutterSystemStates" Id="{e74b52d0-a3ab-400c-a63b-35c8320e25fb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM LightShutterSystemStates

VAR CONSTANT
	nAXIS_NUM : UINT := GVL_APP.nAXIS_NUM - 1; // JUST FOR TESTCRATE!
END_VAR

VAR
	eNeutronFactoryState: E_NeutronFactoryStates := E_NeutronFactoryStates.Disabled;
	// eResetZeroInternal: E_ResetZero := E_ResetZero.INIT;
	eLightShutterSystemState: E_LightShutterSystemStates := E_LightShutterSystemStates.Init;

	i   :   UINT:=0;
	
	bAxesDone: BOOL := FALSE; // Output variable of checkAxesDone
	bAxesHomed: BOOL := FALSE; // Output variable of checkVirtualHomed
	bInPos: BOOL; // Output variable of checkPos
	
	bNeutronFactory_Maintenance: BOOL;	// ?
	bMaintenancePermission: BOOL; 		// ?
	bMaintencancePerformed: BOOL;		// ?
	
	bStartup : BOOL := TRUE;	// Help var for indicating first cycle. Set to FALSE thereafter.
	bEnablePower: BOOL; 		// Input var for actCascadePower - COULD POWER BE INCLUDED IN ST_LightShutter?
	aDisabled: ARRAY [1..nAXIS_NUM] OF BOOL; // INCLUDE IN ST_LightShutter?
	
	bClosedShutters: BOOL := FALSE; // Output variable of checkClosedLimitSwitches
	bAllDisabled: BOOL := FALSE; // Output variable of checkAllDisabled
	
	// For Error Text
	//FaultType   :   stFaultType;
	//sErrorText : T_MaxString := '';
	//sErrorTextNc : T_MaxString := '';
	//strErrorText : DUT_ErrorText;
	//fbRead : FB_ReadTcNcErrorAndDescription;
	
	bLSSOpen: BOOL;		// Simulated signal, normally received from EPICS, to open/close shutters.
	bPSSPower: BOOL; 	// Simulated signal, normally received from EPICS letting us know that PSS has powered our drives.
	
	bOpenHiFake : BOOL; // Simulating a pos switch. To be replaced with physical switch.
	
	aOpenToOpen : ARRAY[1..nAXIS_NUM] OF BOOL; 	// Array of axes call to OpenToOpen
	aTON_delayOpenToOpen : ARRAY[1..nAXIS_NUM] OF TON;
	
	aResetZero : ARRAY[1..nAXIS_NUM] OF BOOL; 	// Array of axes call to ResetZero
	aFbResetZero : ARRAY[1..nAXIS_NUM] OF FB_ResetZero;
	
	aJogF : ARRAY[1..nAXIS_NUM] OF BOOL; 		// Array of axes call to Adjust
	aJogB : ARRAY[1..nAXIS_NUM] OF BOOL;		// Array of axes call to Adjust
	aTOF_delayDisable : ARRAY[1..nAXIS_NUM] OF TOF;
	aTON_delayDone : ARRAY[1..nAXIS_NUM] OF TON; // Remove - moved to FB_ResetZero
	
END_VAR

VAR PERSISTENT
	//aLightShutters : ARRAY[1..GVL_APP.nAXIS_NUM] OF ST_LightShutter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[actRunMethods(); // Update status

// Gets description of error codes and keeps them in mem --- IMPLEMENT ---
prgReadTcNcErrorAndDescription();

// Simulates position switch of second focal point
bOpenHiFake := GVL.astAxes[2].stStatus.fActPosition > 85 AND GVL.astAxes[2].stStatus.fActPosition < 100; 

actFaults(); 			// Checks errors --- IMPLEMENT ---

actPositionSwitches();	// Update GVL_APP.aPosSwitch with value of position switches
actDelayDisable(); 		// aTOF_delayDisable - Delay disabling of the drive of each axis
actDelayOpenToOpen();	// aTON_delayOpenToOpen - Delay OpenToOpen for each axis - for exit condition of actOpenToOpen
actDelayDone(); 		// aTON_delayDone - Delay done for each axis for handling e.g. exit conditions

//// To be mapped to EPICS signal. During tests mapped to DI. /////
IF NOT (eNeutronFactoryState = E_NeutronFactoryStates.Disabled) THEN
	bPSSPower := TRUE;
ELSE
	bPSSPower := FALSE;	
END_IF 
//////////////////////////

// Could also run a general actPower() here, and only set a boolean in the state machine
// true or not. This would also include a check if the device is disabled or if a specific
// axis demands control. Maybe a general bool if power is allowed or not should be given
// true or false in each state. Thus, if axis one requests power, but we are in closed off,
// nothing will happen.

// Dealing with race condition:
// 		Either TON and then check in IF --- This method is mainly used here.
// 		OR new state: POSITIONING_ WAITING
// 		OR while loop
//		COULD R_TRIG be used?

IF bStartup THEN 		// First cycle setup - _TaskInfo[1].FirstCycle did not work, why?)
	bStartup := FALSE;	// This IF will only be entered if it is the very first cycle.
	actInitAxis();
	// Currently resore only works for incremental encoder, not resolver. Easy fix.
	//GVL.astAxes[1].stConfig.eRestorePosition := 1; 
END_IF

CASE eLightShutterSystemState OF

	E_LightShutterSystemStates.Init:
		// Which should be the first state?
		// Need a manual config state which is to be used during commisionning.

		// The homing should be performed in the RESET substate of OPEN	
		// Maybe a requirement of being able to enter in the closed standby state 
		// should be to first have homed everything manually? Alternatively,
		// If not homed, the movement to first open could be performed by jogging
		// until hitting the position switch.
		// Homing in commisioning?

		bEnablePower := TRUE;
		actCascadePower();
		actCascadeHoming();

		IF _TaskInfo[1].CycleCount > 10000 AND bAxesHomed THEN
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedOff;
			eNeutronFactoryState := E_NeutronFactoryStates.Disabled;
		END_IF		


	E_LightShutterSystemStates.ClosedOff:
		// All shutters closed, motor power off, brake on.
		// To do: LS verification and fault handling.

		bEnablePower := FALSE;
		actCascadePower();

		IF bLSSOpen AND bAxesDone THEN
			eNeutronFactoryState := E_NeutronFactoryStates.StartUp;
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedStandby;
		END_IF

		IF bNeutronFactory_Maintenance THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Maintenance;
		END_IF


	E_LightShutterSystemStates.ClosedStandby:
		// Verification of all shutters closed, motor power on (From PSS?), brake on.
		// To do: LS verification and fault handling.

		bEnablePower := FALSE;
		actCascadePower();

		IF bLSSOpen THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Opening;
			eNeutronFactoryState := E_NeutronFactoryStates.NotConfirmedReady;
		END_IF

		IF NOT bLSSOpen AND bClosedShutters THEN
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedOff;
			eNeutronFactoryState := E_NeutronFactoryStates.Disabled;
		END_IF


	E_LightShutterSystemStates.Opening:
		// Resolver monitoring of shutter pos. LSS monitor time for event to happen.
		// Motor power on. Brake off
		// To do: Fault handling. Time monitoring. 

		bEnablePower := TRUE;
		actCascadePower();
		actCascadeOpening();

		IF bAxesDone AND bInPos AND (NOT bClosedShutters OR bAllDisabled) THEN 
			// Also check bLSSOpen to be able to cancel Opening?
			// Also check positions?

			bEnablePower := FALSE;
			actCascadePower();
			eLightShutterSystemState := E_LightShutterSystemStates.Open; // Before transitioning, check NF?
			eNeutronFactoryState := E_NeutronFactoryStates.ConfirmedReady; // Not needed for us - or needed if to confirm "Open"?
		END_IF


	E_LightShutterSystemStates.Open:
		// Verification of all shutters open. Motor power off.
		// Brake on. (Dependent of specific OPEN TO OPEN pos)
		// To do: LS verification and fault handling.
		// Once inside here we allow individual shutter control.

		actPower();
		actOpenToOpen();
		actResetZero();		
		actJog();

		// Possibly create FB_LightShutter and add in array or structure
		// call it from here like:
		// for ... 
		// 		aLightShutter[i].fb_LightShutter(aOpenToOpen, aJogF/aJogB, aResetToZero)

		(*
		IF bJogB OR bJogF AND bLSSOpen THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Adjusting;
			// fJogVelocity bug to be fixed in tc_mca_std_lib
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.fJogVelocity := GVL.astAxes[MAIN.hmiAxisSelection].stConfig.fVelocityDefaultSlow*0.1;
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := TRUE;
		END_IF*)

		(*
		IF bOpenToOpen AND bLSSOpen THEN
			eLightShutterSystemState := E_LightShutterSystemStates.OpenToOpen;
			//fbOpenToOpen(bAxisDelayPower := bAxisDelayPower, bAxisDelayDone:= bAxisDelayDone);

		END_IF

		IF bResetZero AND bLSSOpen THEN // Use with AX drive - Torque homing.
			eLightShutterSystemState := E_LightShutterSystemStates.ResetZero;
		END_IF
		*)

		IF NOT bLSSOpen THEN
			eNeutronFactoryState := E_NeutronFactoryStates.CoolingDown;
			eLightShutterSystemState := E_LightShutterSystemStates.Closing;
		END_IF

	// Remove?
	E_LightShutterSystemStates.OpenToOpen: // Alt: Remove substate and have as option in Open instead
		// Substate of OPEN. 
		// Shutter within open to open resolver pos ??
		// Verification of open shutter switches for Heimdal, T-Rex and Magic.
		// Motor power on, brake off. Scientists ask permission - ctrl room executes.
		// To do: LS verification and fault handling.
		(*
		actPower();
		actOpenToOpen();
		//fbOpenToOpen(bAxisDelayPower:=bAxisDelayPower, bAxisDelayDone:=bAxisDelayDone);

		IF bAxesDone AND bDelayOpenToOpen THEN // bDelayOpenToOpen prevents early exit from this state
			//ABS(GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition - 
			//	aLightShutters[MAIN.hmiAxisSelection].pos[aLightShutters[MAIN.hmiAxisSelection].curPosNbr]) < 1 THEN
			aOpenToOpen[1] := FALSE; // change to aOpenToOpen
			aOpenToOpen[2] := FALSE;
			//actPower();
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF
		*)

	// Remove?
	E_LightShutterSystemStates.Adjusting: // Alt: Remove substate and have as option in Open instead
		// Verification of open shutter, switch in question.
		// Switch cams open position +- 2 mm. Motor power on, brake off.
		// To do: LS verification and fault handling.

		(*
		IF GVL.astAxes[MAIN.hmiAxisSelection].stStatus.bEnabled THEN
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.eCommand :=E_MotionFunctions.eJog;
		
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bJogBwd := bJogB AND 
				GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition >= 
					GVL_APP.aLightShutters[MAIN.hmiAxisSelection].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr]*0.92; 

			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bJogFwd := bJogF AND 
				GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition <= 
					GVL_APP.aLightShutters[MAIN.hmiAxisSelection].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr]*1.08;
		END_IF

		IF NOT bJogB AND NOT bJogF THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF
		*)

	// Remove?
	E_LightShutterSystemStates.ResetZero:
		// Reset of resolver, top shutter pos against mechanical stop.
		// Motor power on, brake off.
		// To do: Implement sequence: ramp, torque. Fault handling.
		// Should we also record position of Closed shutter?

		(*
		FOR i:=1 TO GVL_APP.nAXIS_NUM DO
			IF aResetZero[i] THEN
				aFbResetZero[i](bResetZero := aResetZero[i], bAxisDelayDone := bAxisDelayDone, axisNbr := i);
			END_IF

		END_FOR

		//fbResetZero(bResetZero := bResetZero, bAxisDelayDone := bAxisDelayDone);

		IF bAxesDone AND NOT bResetZero THEN // ALSO IF NOT PRESSED ANYMORE?
		//IF NOT bResetZero THEN // Transitioning from state - need to check axis status? 
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF*)

	E_LightShutterSystemStates.Closing:
		// Resolver monitoring of shutter positions.
		// LSS monitor time for event to happen. Motor power on, brake off
		// To do: Fault handling.

		bEnablePower := TRUE;
		actCascadePower();
		actCascadeClosing();

		IF bAxesDone AND bClosedShutters THEN
			// This one is not safe to check OR bAllDisabled
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedStandby;
		END_IF

	// Remove?
	E_LightShutterSystemStates.Maintenance:
		// Verification of all shutters closed. Motor power off, brake on.
		// As CLOSED OFF, but also administrative permission for port maintenance.

		// Disable alarm from our own switches. But still indicate if 
		// something is open / closed...

		GVL.astAxes[1].stControl.bEnable := FALSE;
		GVL.astAxes[2].stControl.bEnable := FALSE;

		IF bMaintenancePermission THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_ClosedStandby;
		END_IF


	E_LightShutterSystemStates.SinglePortMaintenance_ClosedStandby:

		GVL.astAxes[1].stControl.bEnable := FALSE; // Do motors really need to be energised here?
		GVL.astAxes[2].stControl.bEnable := FALSE;

		IF bMaintenancePermission THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_Opening;
		END_IF

		IF bMaintencancePerformed THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Maintenance;
		END_IF


	E_LightShutterSystemStates.SinglePortMaintenance_Opening:
		// Single shutter opening during maintenance of shutter.
		// Local control? Manual jogging? 

		GVL.astAxes[1].stControl.bEnable := TRUE;
		GVL.astAxes[2].stControl.bEnable := TRUE;
		//actMaintenanceOpening();

		IF bAxesDone AND bInPos THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_Open;
		END_IF


	E_LightShutterSystemStates.SinglePortMaintenance_Open:
		// Single shutter open during maintenance of shutter.
		// Local control?

		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;


	E_LightShutterSystemStates.SinglePortMaintenance_Closing:
		// Single shutter closing during maintenance of shutter.
		// Local control?

		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;


	E_LightShutterSystemStates.LSS_Maintenance:
		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;


	E_LightShutterSystemStates.Fault:
		// Any LSS state machine fault. Two levels of severity: A and B.

		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;

END_CASE
]]></ST>
    </Implementation>
    <Action Name="actCascadeClosing" Id="{3aec288f-4a63-431d-829d-57a315513e67}">
      <Implementation>
        <ST><![CDATA[// Closes all beamlines, in the future in a cascade to limit power peak.
// To fix: Cascading

FOR i := 1 TO nAXIS_NUM DO

	IF GVL.astAxes[i].stStatus.bEnabled THEN
		GVL.astAxes[i].stControl.eCommand:=E_MotionFunctions.eJog;
		GVL.astAxes[i].stControl.bJogBwd:= GVL.astAxes[i].stStatus.bBwEnabled;	
	END_IF

END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadeHoming" Id="{c0a31c1a-9eae-41d8-861d-217a58b3dd55}">
      <Implementation>
        <ST><![CDATA[// Homes all beamlines, in the future in a cascade
// To fix: Cascading

FOR i := 1 TO nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.bEnabled THEN
		GVL.astAxes[i].stConfig.eHomeSeq := E_HomingRoutines.eHomeToLimit_Bwd;
		GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eHome;
		GVL.astAxes[i].stControl.bExecute := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadeOpening" Id="{4c97e789-267b-4b79-a69b-5f26e1a5593c}">
      <Implementation>
        <ST><![CDATA[// Opens all beamlines to the first focal point position, in the future in a cascade
// To do: Cascading

FOR i := 1 TO nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.fActPosition <> 100 THEN // Change to something sensible
		IF GVL.astAxes[i].stStatus.bEnabled THEN
			GVL.astAxes[i].stControl.fPosition := GVL_APP.aLightShutters[i].pos[1];
			GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;
			GVL.astAxes[i].stControl.bExecute := TRUE;
		END_IF
	END_IF
	GVL_APP.aLightShutters[i].curPosNbr:=1;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadePower" Id="{dd240e48-c20e-4aec-85e5-64c3baa489bb}">
      <Implementation>
        <ST><![CDATA[// Enable power to all beamlines if not disabled, in the future cascading.
// To fix: cascading.

FOR i := 1 TO nAXIS_NUM DO
	GVL.astAxes[i].stControl.bEnable := (bEnablePower AND NOT aDisabled[i]); //OR XOR ar_bPower[i];
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actDelayDisable" Id="{4e18b649-dcfd-4b2a-b2d4-b2dab40e4515}">
      <Implementation>
        <ST><![CDATA[// Delays the disabeling of each axis

FOR i := 1 TO nAXIS_NUM DO
    aTOF_delayDisable[i](IN:=aJogB[i] OR aJogF[i] OR aResetZero[i] OR aOpenToOpen[i], PT:=T#10S);
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actDelayDone" Id="{455ad4ef-9e60-48d8-817c-ccd3b30f3296}">
      <Implementation>
        <ST><![CDATA[// Delays the bDone of each axis

FOR i := 1 TO nAXIS_NUM DO
    aTON_delayDone[i](IN:=GVL.astAxes[i].stStatus.bDone, PT:=T#1S);
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actDelayOpenToOpen" Id="{e23c96c8-abcb-496f-80a9-e8358062f75c}">
      <Implementation>
        <ST><![CDATA[// Delays aOpenToOpen[i] for each axis

FOR i := 1 TO nAXIS_NUM DO
    aTON_delayOpenToOpen[i](IN:=aOpenToOpen[i], PT:=T#0.5S);
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actFaults" Id="{977747f0-b936-4a6c-a020-dbc071546ad0}">
      <Implementation>
        <ST><![CDATA[// Checking for faults which could take the statemachine into a fault state

// Actuator velocity: > 110 mm/s - B
// Actuator stroke time out: > 30 s - A
// Motor torque: > 21.5 Nm - B
// Motor DC Voltage downwards movement: > 850 V - B
// Motor DC Voltage upwards movement: > 600 V - B
// Motor DC Power upwards movement: > 380 W - B
// Applied hold brake position indication: Any feedback signal deviating from what is expected - B
// Resolver position compared with Closed Shutter Indications: Deviation 0.5 mm - A
// Deviation: Resolver position compared with Open Shutter LO: Deviation 2.2 mm (adjustment range +-2 mm) - A
// Deviation: Resolver position compared with Open Shutter HI: Deviation 2.2 mm (adjustment range +-2 mm) - A
// Motor temperature: > 50 C - B
// Servo drive temperature: > 50 C - B
// Homing sequence not fulfilled timeout > 30 s - B

// Should a statemachine take care of these cases? eFaults.A/B?]]></ST>
      </Implementation>
    </Action>
    <Action Name="actInitAxis" Id="{7d5439e6-039b-4e02-b0dd-bef292df856d}">
      <Implementation>
        <ST><![CDATA[// Initialization of axes

GVL_APP.aLightShutters[E_Beamline.Miracles].nbrOfPos := 1;
GVL_APP.aLightShutters[E_Beamline.Heimdal].nbrOfPos := 2;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actJog" Id="{b8445e23-262c-4b51-8691-10e5fe140dc8}">
      <Implementation>
        <ST><![CDATA[// Moves all chosen beamlines

FOR i := 1 TO nAXIS_NUM DO

		IF GVL.astAxes[i].stStatus.bEnabled AND NOT aResetZero[i] AND NOT aOpenToOpen[i] AND NOT aDisabled[i] THEN
			IF (aJogB[i] OR aJogF[i]) THEN
				GVL.astAxes[i].stControl.eCommand :=E_MotionFunctions.eJog;
			END_IF
			
			GVL.astAxes[i].stControl.bJogBwd := aJogB[i] AND 
				GVL.astAxes[i].stStatus.fActPosition >= 
					GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[i].curPosNbr]*0.94; 
		
			GVL.astAxes[i].stControl.bJogFwd := aJogF[i] AND 
				GVL.astAxes[i].stStatus.fActPosition <= 
					GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[i].curPosNbr]*1.06;
		END_IF
		
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actOpenToOpen" Id="{12654c2b-32ef-4d41-a9d2-090ef34fb28b}">
      <Implementation>
        <ST><![CDATA[// Moves all chosen beamlines to chosen position

FOR i := 1 TO nAXIS_NUM DO
	
	IF aOpenToOpen[i] AND NOT aDisabled[i] THEN
		GVL.astAxes[i].stControl.bEnable := TRUE;
		IF GVL.astAxes[i].stStatus.bEnabled THEN
			GVL.astAxes[i].stControl.fPosition := 
				GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[i].curPosNbr];
			GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;
			GVL.astAxes[i].stControl.bExecute := TRUE;
		END_IF
		
		IF GVL.astAxes[i].stStatus.bDone AND aTON_delayOpenToOpen[i].Q THEN
			aOpenToOpen[i] := FALSE;
		END_IF
		
	ELSIF aDisabled[i] THEN
		aOpenToOpen[i] := FALSE;
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actPositionSwitches" Id="{2fb66385-0548-46bb-8023-1487d911d839}">
      <Implementation>
        <ST><![CDATA[// Update the array of switches

FOR i := 1 TO nAXIS_NUM DO
	
	GVL_APP.aPosSwitch[i,1] := GVL.astAxes[i].stInputs.bHomeSensor; // Needs change to correct BOOL
	
	IF GVL_APP.aLightShutters[i].nbrOfPos = 2 THEN
		GVL_APP.aPosSwitch[i,2] := bOpenHiFake;
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actPower" Id="{4d277f48-e58d-45aa-be72-db136e57c97f}">
      <Implementation>
        <ST><![CDATA[// Enable power to individual beamlines if not disabled.

FOR i := 1 TO nAXIS_NUM DO
	
	IF GVL.astAxes[i].stStatus.bDone THEN
		GVL.astAxes[i].stControl.bEnable := ((aJogB[i] OR aJogF[i] OR aTOF_delayDisable[i].Q OR aOpenToOpen[i] OR aResetZero[i]) AND NOT aDisabled[i]); //OR XOR ar_bPower[i];
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actResetZero" Id="{c7e34d37-2d87-4e76-ab8f-73d8ef213323}">
      <Implementation>
        <ST><![CDATA[// Calls a FB_ResetZero for each axis where aResetZero[i] is TRUE

FOR i:=1 TO nAXIS_NUM DO
	
	IF aResetZero[i] AND NOT aDisabled[i] THEN
        aFbResetZero[i](bResetZero := aResetZero[i], bAxisDone:=GVL.astAxes[i].stStatus.bDone, axisNbr := i);
	ELSIF aDisabled[i] THEN
		aResetZero[i] := FALSE;
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actRunMethods" Id="{e9c6596f-994e-4ede-8713-4401c6c76788}">
      <Implementation>
        <ST><![CDATA[// Runs methods

//checkAxesEnabled(bOutput => bAxesEnabled);

checkVirtualHomed(bOutput => bAxesHomed);
checkAxesDone(bOutput => bAxesDone);
checkPos(bOutput => bInPos);
checkClosedLimitSwitches(bOutput => bClosedShutters);
checkAllDisabled(bOutput => bAllDisabled);
// checkOpenToOpen(bOutput => bOpenToOpen);
// checkResetZero(bOutput => bResetZero);
// checkJog(bOutput => bJog);
// checkEnabled(bOutput => bAxesEnabled);


//checkAllAxisErrors(bOutput => bAxisErrorsPresent);
//checkErrorState(bOutput => bFunctionInErrorState);*)
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actSavePos" Id="{05e85822-efae-4825-bb7b-24ba1bf1cfd3}">
      <Implementation>
        <ST><![CDATA[// Saves the current position of all axes to aLightShutters. NOT USED

FOR i := 1 TO nAXIS_NUM DO
	GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr] := GVL.astAxes[i].stStatus.fActPosition;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Method Name="checkAllDisabled" Id="{2341b51b-03ea-4e27-8f7c-a0ea7e409ce5}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkAllDisabled: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF NOT aDisabled[i] THEN
		bOutput := FALSE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkAxesDone" Id="{3bf29ac0-a5a4-4b28-992a-7e7f336b2204}">
      <Declaration><![CDATA[(*Method to check if all axes are Done.
Only returns TRUE if all axes are Done*)
METHOD checkAxesDone: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF NOT aDisabled[i] THEN
		IF NOT GVL.astAxes[i].stStatus.bDone THEN
    		bOutput := FALSE;
			EXIT;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkClosedLimitSwitches" Id="{db697710-c00a-432e-a17e-48d5a7399d04}">
      <Declaration><![CDATA[(*Method to check if all axes are closed. Ignores a axis if it is disabled.
Only returns TRUE if all axes are closed*)
METHOD checkClosedLimitSwitches: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Needs fix, dealing with e.g. fPos 0.

FOR i := 1 TO nAXIS_NUM DO
	IF GVL.astAxes[i].stInputs.bLimitBwd AND NOT aDisabled[i] THEN
		bOutput := FALSE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkEnabled" Id="{01ba2ae5-66fb-4093-87c1-a856a3e5e5f5}">
      <Declaration><![CDATA[(*Method to check if the axes are homed/the calibration flag is present.
Only returns TRUE if all axes are homed *)
METHOD checkEnabled: BOOL
VAR_OUTPUT
    bOutput: BOOL:= FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.bEnabled THEN
    	bOutput := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkJog" Id="{afcc572f-95e3-4bd9-a32a-85e5fd026045}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkJog: BOOL
VAR_OUTPUT
    bOutput: BOOL := FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF aJogB[i] OR aJogF[i] THEN
		bOutput := TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkOpenToOpen" Id="{efea51aa-8db1-49b5-a569-5913eca1228c}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkOpenToOpen: BOOL
VAR_OUTPUT
    bOutput: BOOL := FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF aOpenToOpen[i] THEN
		bOutput := TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkPos" Id="{783018b8-56b2-4894-b286-1694d0470845}">
      <Declaration><![CDATA[(*Method to check if all axes are withing 10 % of its set value.
Only returns TRUE if all axes are within 10% of fPosition.*)
METHOD checkPos: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Needs fix, dealing with e.g. fPos 0.

FOR i := 1 TO nAXIS_NUM DO
	IF NOT aDisabled[i] THEN // Check if beamline is disabled/enabled
		IF GVL.astAxes[i].stStatus.fActPosition < GVL.astAxes[i].stControl.fPosition*0.9 
		OR GVL.astAxes[i].stStatus.fActPosition > GVL.astAxes[i].stControl.fPosition*1.10 THEN  // Add something about position?
    		bOutput := FALSE;
			EXIT;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkResetZero" Id="{57c50c84-cfaf-457b-884c-93f9459f6c93}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkResetZero: BOOL
VAR_OUTPUT
    bOutput: BOOL := FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF aResetZero[i] THEN
		bOutput := TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkVirtualHomed" Id="{10cb69f6-f474-4f89-bf23-cab8eaa1c08c}">
      <Declaration><![CDATA[(*Method to check if the axes are homed/the calibration flag is present.
Only returns TRUE if all axes are homed *)
METHOD checkVirtualHomed: BOOL
VAR_OUTPUT
    bOutput: BOOL:= TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO nAXIS_NUM DO
	IF NOT GVL.astAxes[i].stStatus.bHomed THEN
    	bOutput := FALSE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>