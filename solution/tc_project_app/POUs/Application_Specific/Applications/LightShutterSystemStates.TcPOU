<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="LightShutterSystemStates" Id="{e74b52d0-a3ab-400c-a63b-35c8320e25fb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM LightShutterSystemStates
VAR

	eNeutronFactoryState: E_NeutronFactoryStates := E_NeutronFactoryStates.Disabled;
	eResetZeroInternal: E_ResetZero := E_ResetZero.INIT;
	eLightShutterSystemState: E_LightShutterSystemStates := E_LightShutterSystemStates.Init;

	i   :   UINT:=0;
	
	bAxesDone: BOOL := FALSE; // Output variable of checkAxesDone
	bAxesHomed: BOOL := FALSE; // Output variable of checkVirtualHomed
	bInPos: BOOL; // Output variable of checkPos
	bJogB: BOOL; // Transition variable indicating if Adjusting-state is to be entered
	bJogF: BOOL; // Transition variable indicating if Adjusting-state is to be entered
	bOpenToOpen: BOOL; // Transition variable indicating if OpenToOpen-state is to be entered

	// bClosedOff: BOOL; // Signal from PSS?
	bNeutronFactory_Maintenance: BOOL;
	bMaintenancePermission: BOOL;
	bMaintencancePerformed: BOOL;
	
	bStartup : BOOL := TRUE; // Help variable for indicating first cycle. Set to FALSE thereafter.

	bResetZero: BOOL; // Transition variable indicating if ResetZero-state is to be entered
	fPosX : LREAL; // Help variable for calculating new focal point
	fPosY : LREAL; // Help variable for calculating new focal point
	fPosFocal : LREAL; // Help variable with value of new focal point

	bEnablePower: BOOL; // Input variable for actCascadePower - COULD POWER BE INCLUDED IN ST_LightShutter?
	aDisabled: ARRAY [1..GVL_APP.nAXIS_NUM] OF BOOL; // INCLUDE IN ST_LightShutter
	
	bClosedShutters: BOOL := FALSE; // Output variable of checkClosedLimitSwitches
	bAllDisabled: BOOL := FALSE; // Output variable of checkAllDisabled
	//FaultType   :   stFaultType;
	//sErrorText : T_MaxString := '';
	//sErrorTextNc : T_MaxString := '';
	//strErrorText : DUT_ErrorText;
	//fbRead : FB_ReadTcNcErrorAndDescription;
	
	TON_delayDone : TON;
	bAxisDelayDone : BOOL; // Output variable of TON_delayDone used to avoid race condition
	TON_delayPower : TON;
	bAxisDelayPower : BOOL; // Output variable of TON_delayPower used to avoid race condition
	
	bLSS_Open: BOOL; // Simulated signal, normally received from EPICS, to open/close shutters.
	bPSSPower: BOOL; // Simulated signal, normally received from EPICS letting us know that PSS has powered our drives.
	
	bOpenHiFake : BOOL; // Simulating a pos switch. To be replaced with physical switch.
	
	//aPosSwitch : ARRAY[1..GVL_APP.nAXIS_NUM, 1..2] OF BOOL;  // Move to ST_LightShutter?
	usCurrentPos : USINT; // This is currently used as a helper variable in E_ResetZero.
	fbOpenToOpen : FB_OpenToOpen;
	aOpenToOpen : ARRAY[1..GVL_APP.nAXIS_NUM] OF BOOL; // 
	bAxesEnabled : BOOL; // If any axes is enabled
	TON_delayOpenToOpen : TON;
	bDelayOpenToOpen : BOOL;
	
	aResetZero : ARRAY[1..GVL_APP.nAXIS_NUM] OF BOOL;
	fbResetZero : FB_ResetToZero;
	aFbResetZero : ARRAY[1..GVL_APP.nAXIS_NUM] OF FB_ResetToZero;
	TON_delayResetZero : TON;
	bDelayResetZero : BOOL;
	
END_VAR

VAR PERSISTENT
	//aLightShutters : ARRAY[1..GVL_APP.nAXIS_NUM] OF ST_LightShutter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[actRunMethods(); // Update status
prgReadTcNcErrorAndDescription(); //Gets description of error codes and keeps them in mem --- IMPLEMENT ---
actFaults(); // Checks errors --- IMPLEMENT ---

//TON_delayDone(IN:=GVL.astAxes[MAIN.hmiAxisSelection].stStatus.bDone, PT:=T#2S, Q=>bAxisDelayDone);
//TON_delayPower(IN:=GVL.astAxes[MAIN.hmiAxisSelection].stStatus.bEnabled, PT:=T#0.5S, Q=>bAxisDelayPower);
TON_delayDone(IN:=bAxesDone, PT:=T#2S, Q=>bAxisDelayDone);
TON_delayPower(IN:=bAxesEnabled, PT:=T#0.5S, Q=>bAxisDelayPower);
TON_delayOpenToOpen(IN:=bOpenToOpen, PT:=T#0.5S, Q=>bDelayOpenToOpen);
TON_delayResetZero(IN:=bResetZero, PT:=T#0.5S, Q=>bDelayResetZero);

bOpenHiFake := GVL.astAxes[2].stStatus.fActPosition > 85 AND GVL.astAxes[2].stStatus.fActPosition < 100; // Simulates position switch of second focal point
actPositionSwitches();

//// To be mapped to EPICS signal. During tests mapped to DI. /////
IF NOT (eNeutronFactoryState = E_NeutronFactoryStates.Disabled) THEN
	bPSSPower := TRUE;
ELSE
	bPSSPower := FALSE;	
END_IF 
//////////////////////////

// Could also run a general actPower() here, and only set a boolean in the state machine
// true or not. This would also include a check if the device is disabled or if a specific
// axis demands control. Maybe a general bool if power is allowed or not should be given
// true or false in each state. Thus, if axis one requests power, but we are in closed off,
// nothing will happen.

// Dealing with race condition:
// 		Either TON and then check in IF --- This method is mainly used here.
// 		OR new state: POSITIONING_ WAITING
// 		OR while loop

IF bStartup THEN // First cycle setup - _TaskInfo[1].FirstCycle did not work, why?)
	bStartup := FALSE; // This IF will only be entered if it is the very first cycle.
	actInitAxis();
	//GVL.astAxes[1].stConfig.eRestorePosition := 1; // Currently only works for incremental encoder, not resolver. Easy fix.
END_IF

CASE eLightShutterSystemState OF

	E_LightShutterSystemStates.Init:
		// Which should be the first state?
		// Need a manual config state which is to be used during commisionning.
		
		// The homing should be performed in the RESET substate of OPEN	
		// Maybe a requirement of being able to enter in the closed standby state 
		// should be to first have homed everything manually? Alternatively,
		// If not homed, the movement to first open could be performed by jogging
		// until hitting the position switch.
		// Homing can also be performed in Maintenance mode.
	    
		bEnablePower := TRUE;
		actCascadePower();
		actCascadeHoming();
		
		IF _TaskInfo[1].CycleCount > 10000 AND bAxesHomed THEN
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedOff;
			eNeutronFactoryState := E_NeutronFactoryStates.Disabled;
		END_IF		
	
		
	E_LightShutterSystemStates.ClosedOff:
		// All shutters closed, motor power off, brake on.
		// To do: LS verification and fault handling.
		
		bEnablePower := FALSE;
		actCascadePower();
		
		IF bLSS_Open AND bAxesDone THEN
			eNeutronFactoryState := E_NeutronFactoryStates.StartUp;
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedStandby;
		END_IF
		
		IF bNeutronFactory_Maintenance THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Maintenance;
		END_IF
	
	
	E_LightShutterSystemStates.ClosedStandby:
		// Verification of all shutters closed, motor power on (From PSS?), brake on.
		// To do: LS verification and fault handling.
		
		bEnablePower := FALSE;
		actCascadePower();
		
		IF bLSS_Open THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Opening;
			eNeutronFactoryState := E_NeutronFactoryStates.NotConfirmedReady;
		END_IF
		
		IF NOT bLSS_Open AND bClosedShutters THEN
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedOff;
			eNeutronFactoryState := E_NeutronFactoryStates.Disabled;
		END_IF
		
	
	E_LightShutterSystemStates.Opening:
		// Resolver monitoring of shutter pos. LSS monitor time for event to happen.
		// Motor power on. Brake off
		// To do: Fault handling. Time monitoring. 
		
		bEnablePower := TRUE;
		actCascadePower();
		actCascadeOpening();
		
		IF bAxesDone AND bInPos AND (NOT bClosedShutters OR bAllDisabled) THEN 
			// Also check bLSS_Open to be able to cancel Opening?
			// Also check positions?
			
			bEnablePower := FALSE;
			actCascadePower();
			eLightShutterSystemState := E_LightShutterSystemStates.Open; // Before transitioning, check NF?
			eNeutronFactoryState := E_NeutronFactoryStates.ConfirmedReady; // Not needed for us - or needed if to confirm "Open"?
		END_IF
		
	
	E_LightShutterSystemStates.Open:
		// Verification of all shutters open. Motor power off.
		// Brake on. (Dependent of specific OPEN TO OPEN pos)
		// To do: LS verification and fault handling.
		
		// Once inside here we allow individual control.
		// The control within Open could be handle with that the enable/disable GUI button e.g.
		// turns power on temporarily for that axis? Or should the enable button turn a bool in 
		// an array TRUE / FALSE also here?
		
		IF bAxesDone THEN
			bEnablePower := FALSE;
			actCascadePower();
		END_IF
		
		
		// Possibly create FB_LightShutter and add in array or structure
		// call it from here like:
		// for ... 
		// 		aLightShutter[i].fb_LightShutter(aOpenToOpen, aJogF/aJogB, aResetToZero)??
		
		
		IF bJogB OR bJogF AND bLSS_Open THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Adjusting;
			// fJogVelocity bug to be fixed in tc_mca_std_lib
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.fJogVelocity := GVL.astAxes[MAIN.hmiAxisSelection].stConfig.fVelocityDefaultSlow*0.1;
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := TRUE;
		END_IF
		
		IF bOpenToOpen AND bLSS_Open THEN
			eLightShutterSystemState := E_LightShutterSystemStates.OpenToOpen;
			//fbOpenToOpen(bAxisDelayPower := bAxisDelayPower, bAxisDelayDone:= bAxisDelayDone);

		END_IF

		IF bResetZero AND bLSS_Open THEN // Use with AX drive - Torque homing.
			eLightShutterSystemState := E_LightShutterSystemStates.ResetZero;
		END_IF
		
		IF NOT bLSS_Open THEN
			eNeutronFactoryState := E_NeutronFactoryStates.CoolingDown;
			eLightShutterSystemState := E_LightShutterSystemStates.Closing;
		END_IF
	
		
	E_LightShutterSystemStates.OpenToOpen: // Alt: Remove substate and have as option in Open instead
		// Substate of OPEN. 
		// Shutter within open to open resolver pos ??
		// Verification of open shutter switches for Heimdal, T-Rex and Magic.
		// Motor power on, brake off. Scientists ask permission - ctrl room executes.
		// To do: LS verification and fault handling.
		
		actPower();
		actOpenToOpen();
		//fbOpenToOpen(bAxisDelayPower:=bAxisDelayPower, bAxisDelayDone:=bAxisDelayDone);
			
		IF bAxesDone AND bDelayOpenToOpen THEN // bDelayOpenToOpen prevents early exit from this state
			//ABS(GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition - 
			//	aLightShutters[MAIN.hmiAxisSelection].pos[aLightShutters[MAIN.hmiAxisSelection].curPosNbr]) < 1 THEN
			aOpenToOpen[1] := FALSE; // change to aOpenToOpen
			aOpenToOpen[2] := FALSE;
			//actPower();
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF
		
	
	E_LightShutterSystemStates.Adjusting: // Alt: Remove substate and have as option in Open instead
		// Verification of open shutter, switch in question.
		// Switch cams open position +- 2 mm. Motor power on, brake off.
		// To do: LS verification and fault handling.
		
		IF GVL.astAxes[MAIN.hmiAxisSelection].stStatus.bEnabled THEN
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.eCommand :=E_MotionFunctions.eJog;
			
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bJogBwd := bJogB AND 
				GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition >= 
					GVL_APP.aLightShutters[MAIN.hmiAxisSelection].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr]*0.92; 
		
			GVL.astAxes[MAIN.hmiAxisSelection].stControl.bJogFwd := bJogF AND 
				GVL.astAxes[MAIN.hmiAxisSelection].stStatus.fActPosition <= 
					GVL_APP.aLightShutters[MAIN.hmiAxisSelection].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr]*1.08;
		END_IF
		
		IF NOT bJogB AND NOT bJogF THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF
	
	
	E_LightShutterSystemStates.ResetZero:
		// Reset of resolver, top shutter pos against mechanical stop.
		// Motor power on, brake off.
		// To do: Implement sequence: ramp, torque. Fault handling.
		// Should we also record position of Closed shutter?
		
		FOR i:=1 TO GVL_APP.nAXIS_NUM DO
			IF aResetZero[i] THEN
				aFbResetZero[i](bResetZero := aResetZero[i], bAxisDelayDone := bAxisDelayDone, axisNbr := i);
			END_IF
			
		END_FOR
				
		//fbResetZero(bResetZero := bResetZero, bAxisDelayDone := bAxisDelayDone);
		
		IF bAxesDone AND NOT bResetZero THEN // ALSO IF NOT PRESSED ANYMORE?
		//IF NOT bResetZero THEN // Transitioning from state - need to check axis status? 
			eLightShutterSystemState := E_LightShutterSystemStates.Open;
		END_IF
		
	E_LightShutterSystemStates.Closing:
		// Resolver monitoring of shutter positions.
		// LSS monitor time for event to happen. Motor power on, brake off
		// To do: Fault handling.
		
		bEnablePower := TRUE;
		actCascadePower();
		actCascadeClosing();
		
		IF bAxesDone AND bClosedShutters THEN
			//This one is not safe to check OR bAllDisabled
			eLightShutterSystemState := E_LightShutterSystemStates.ClosedStandby;
		END_IF
		
		
	E_LightShutterSystemStates.Maintenance:
		// Verification of all shutters closed. Motor power off, brake on.
		// As CLOSED OFF, but also administrative permission for port maintenance.
		
		// Disable alarm from our own switches. But still indicate if 
		// something is open / closed...
		
		GVL.astAxes[1].stControl.bEnable := FALSE;
		GVL.astAxes[2].stControl.bEnable := FALSE;
		
		IF bMaintenancePermission THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_ClosedStandby;
		END_IF
		
		
	E_LightShutterSystemStates.SinglePortMaintenance_ClosedStandby:
	
		GVL.astAxes[1].stControl.bEnable := FALSE; // Do motors really need to be energised here?
		GVL.astAxes[2].stControl.bEnable := FALSE;
		
		IF bMaintenancePermission THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_Opening;
		END_IF
		
		IF bMaintencancePerformed THEN
			eLightShutterSystemState := E_LightShutterSystemStates.Maintenance;
		END_IF

	
	E_LightShutterSystemStates.SinglePortMaintenance_Opening:
		// Single shutter opening during maintenance of shutter.
		// Local control? Manual jogging? 
		
		GVL.astAxes[1].stControl.bEnable := TRUE;
		GVL.astAxes[2].stControl.bEnable := TRUE;
		//actMaintenanceOpening();
		
		IF bAxesDone AND bInPos THEN
			eLightShutterSystemState := E_LightShutterSystemStates.SinglePortMaintenance_Open;
		END_IF
	
	
	E_LightShutterSystemStates.SinglePortMaintenance_Open:
		// Single shutter open during maintenance of shutter.
		// Local control?
		
		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;
	
	
	E_LightShutterSystemStates.SinglePortMaintenance_Closing:
		// Single shutter closing during maintenance of shutter.
		// Local control?
		
		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;
	

	E_LightShutterSystemStates.LSS_Maintenance:
		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;
	

	E_LightShutterSystemStates.Fault:
		// Any LSS state machine fault. Two levels of severity: A and B.
		
		GVL.astAxes[MAIN.hmiAxisSelection].stControl.bEnable := FALSE;
	
END_CASE
]]></ST>
    </Implementation>
    <Action Name="actCascadeClosing" Id="{3aec288f-4a63-431d-829d-57a315513e67}">
      <Implementation>
        <ST><![CDATA[// Closes all beamlines, in the future in a cascade to limit power peak.
// To fix: Cascading

FOR i := 1 TO GVL_APP.nAXIS_NUM DO

	IF GVL.astAxes[i].stStatus.bEnabled THEN
		GVL.astAxes[i].stControl.eCommand:=E_MotionFunctions.eJog;
		GVL.astAxes[i].stControl.bJogBwd:= GVL.astAxes[i].stStatus.bBwEnabled;	
	END_IF

END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadeHoming" Id="{c0a31c1a-9eae-41d8-861d-217a58b3dd55}">
      <Implementation>
        <ST><![CDATA[// Homes all beamlines, in the future in a cascade
// To fix: Cascading

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.bEnabled THEN
		GVL.astAxes[i].stConfig.eHomeSeq := E_HomingRoutines.eHomeToLimit_Bwd;
		GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eHome;
		GVL.astAxes[i].stControl.bExecute := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadeOpening" Id="{4c97e789-267b-4b79-a69b-5f26e1a5593c}">
      <Implementation>
        <ST><![CDATA[// Opens all beamlines to the first focal point position, in the future in a cascade
// To do: Cascading

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.fActPosition <> 100 THEN // Change to something sensible
		IF GVL.astAxes[i].stStatus.bEnabled THEN
			GVL.astAxes[i].stControl.fPosition := GVL_APP.aLightShutters[i].pos[1];
			GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;
			GVL.astAxes[i].stControl.bExecute := TRUE;
		END_IF
	END_IF
	GVL_APP.aLightShutters[i].curPosNbr:=1;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actCascadePower" Id="{dd240e48-c20e-4aec-85e5-64c3baa489bb}">
      <Implementation>
        <ST><![CDATA[// Enable power to all beamlines if not disabled, in the future cascading.
// To fix: cascading.

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	GVL.astAxes[i].stControl.bEnable := (bEnablePower AND NOT aDisabled[i]); //OR XOR ar_bPower[i];
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actFaults" Id="{977747f0-b936-4a6c-a020-dbc071546ad0}">
      <Implementation>
        <ST><![CDATA[// Checking for faults which could take the statemachine into a fault state

// Actuator velocity: > 110 mm/s - B
// Actuator stroke time out: > 30 s - A
// Motor torque: > 21.5 Nm - B
// Motor DC Voltage downwards movement: > 850 V - B
// Motor DC Voltage upwards movement: > 600 V - B
// Motor DC Power upwards movement: > 380 W - B
// Applied hold brake position indication: Any feedback signal deviating from what is expected - B
// Resolver position compared with Closed Shutter Indications: Deviation 0.5 mm - A
// Deviation: Resolver position compared with Open Shutter LO: Deviation 2.2 mm (adjustment range +-2 mm) - A
// Deviation: Resolver position compared with Open Shutter HI: Deviation 2.2 mm (adjustment range +-2 mm) - A
// Motor temperature: > 50 C - B
// Servo drive temperature: > 50 C - B
// Homing sequence not fulfilled timeout > 30 s - B

// Should a statemachine take care of these cases? eFaults.A/B?]]></ST>
      </Implementation>
    </Action>
    <Action Name="actInitAxis" Id="{7d5439e6-039b-4e02-b0dd-bef292df856d}">
      <Implementation>
        <ST><![CDATA[// Initialization of axes

GVL_APP.aLightShutters[E_Beamline.Miracles].nbrOfPos := 1;
GVL_APP.aLightShutters[E_Beamline.Heimdal].nbrOfPos := 2;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actOpenToOpen" Id="{12654c2b-32ef-4d41-a9d2-090ef34fb28b}">
      <Implementation>
        <ST><![CDATA[// Moves all chosen beamlines

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.bEnabled THEN
		GVL.astAxes[i].stControl.fPosition := 
				GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[i].curPosNbr];
		GVL.astAxes[i].stControl.eCommand := E_MotionFunctions.eMoveAbsolute;
		GVL.astAxes[i].stControl.bExecute := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actPositionSwitches" Id="{2fb66385-0548-46bb-8023-1487d911d839}">
      <Implementation>
        <ST><![CDATA[// Update the array of switches

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	
	GVL_APP.aPosSwitch[i,1] := GVL.astAxes[i].stInputs.bHomeSensor; // Needs change to correct BOOL
	
	IF GVL_APP.aLightShutters[i].nbrOfPos = 2 THEN
		GVL_APP.aPosSwitch[i,2] := bOpenHiFake;
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actPower" Id="{4d277f48-e58d-45aa-be72-db136e57c97f}">
      <Implementation>
        <ST><![CDATA[// Enable power to individual beamlines if not disabled.

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	GVL.astAxes[i].stControl.bEnable := (aOpenToOpen[i] AND NOT aDisabled[i]); //OR XOR ar_bPower[i];
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="actRunMethods" Id="{e9c6596f-994e-4ede-8713-4401c6c76788}">
      <Implementation>
        <ST><![CDATA[//checkAxesEnabled(bOutput => bAxesEnabled);

checkVirtualHomed(bOutput => bAxesHomed);
checkAxesDone(bOutput => bAxesDone);
checkPos(bOutput => bInPos);
checkClosedLimitSwitches(bOutput => bClosedShutters);
checkAllDisabled(bOutput => bAllDisabled);
checkOpenToOpen(bOutput => bOpenToOpen);
checkResetZero(bOutput => bResetZero);
checkEnabled(bOutput => bAxesEnabled);


//checkAllAxisErrors(bOutput => bAxisErrorsPresent);
//checkErrorState(bOutput => bFunctionInErrorState);*)
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actSavePos" Id="{05e85822-efae-4825-bb7b-24ba1bf1cfd3}">
      <Implementation>
        <ST><![CDATA[// Saves the current position of all axes to aLightShutters. NOT USED

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	GVL_APP.aLightShutters[i].pos[GVL_APP.aLightShutters[MAIN.hmiAxisSelection].curPosNbr] := GVL.astAxes[i].stStatus.fActPosition;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Method Name="checkAllDisabled" Id="{2341b51b-03ea-4e27-8f7c-a0ea7e409ce5}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkAllDisabled: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF NOT aDisabled[i] THEN
		bOutput := FALSE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkAxesDone" Id="{3bf29ac0-a5a4-4b28-992a-7e7f336b2204}">
      <Declaration><![CDATA[(*Method to check if all axes are Done.
Only returns TRUE if all axes are Done*)
METHOD checkAxesDone: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF NOT aDisabled[i] THEN
		IF NOT GVL.astAxes[i].stStatus.bDone THEN
    		bOutput := FALSE;
			EXIT;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkClosedLimitSwitches" Id="{db697710-c00a-432e-a17e-48d5a7399d04}">
      <Declaration><![CDATA[(*Method to check if all axes are closed. Ignores a axis if it is disabled.
Only returns TRUE if all axes are closed*)
METHOD checkClosedLimitSwitches: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Needs fix, dealing with e.g. fPos 0.

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF GVL.astAxes[i].stInputs.bLimitBwd AND NOT aDisabled[i] THEN
		bOutput := FALSE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkEnabled" Id="{01ba2ae5-66fb-4093-87c1-a856a3e5e5f5}">
      <Declaration><![CDATA[(*Method to check if the axes are homed/the calibration flag is present.
Only returns TRUE if all axes are homed *)
METHOD checkEnabled: BOOL
VAR_OUTPUT
    bOutput: BOOL:= FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF GVL.astAxes[i].stStatus.bEnabled THEN
    	bOutput := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkOpenToOpen" Id="{efea51aa-8db1-49b5-a569-5913eca1228c}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkOpenToOpen: BOOL
VAR_OUTPUT
    bOutput: BOOL := FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF aOpenToOpen[i] THEN
		bOutput := TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkPos" Id="{783018b8-56b2-4894-b286-1694d0470845}">
      <Declaration><![CDATA[(*Method to check if all axes are withing 10 % of its set value.
Only returns TRUE if all axes are within 10% of fPosition.*)
METHOD checkPos: BOOL
VAR_OUTPUT
    bOutput: BOOL := TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Needs fix, dealing with e.g. fPos 0.

FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF NOT aDisabled[i] THEN // Check if beamline is disabled/enabled
		IF GVL.astAxes[i].stStatus.fActPosition < GVL.astAxes[i].stControl.fPosition*0.9 
		OR GVL.astAxes[i].stStatus.fActPosition > GVL.astAxes[i].stControl.fPosition*1.10 THEN  // Add something about position?
    		bOutput := FALSE;
			EXIT;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkResetZero" Id="{57c50c84-cfaf-457b-884c-93f9459f6c93}">
      <Declaration><![CDATA[(*Method to check if all axes are disabled.
Only returns TRUE if all axes are enabled.*)
METHOD checkResetZero: BOOL
VAR_OUTPUT
    bOutput: BOOL := FALSE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF aResetZero[i] THEN
		bOutput := TRUE;
		EXIT;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkVirtualHomed" Id="{10cb69f6-f474-4f89-bf23-cab8eaa1c08c}">
      <Declaration><![CDATA[(*Method to check if the axes are homed/the calibration flag is present.
Only returns TRUE if all axes are homed *)
METHOD checkVirtualHomed: BOOL
VAR_OUTPUT
    bOutput: BOOL:= TRUE;
END_VAR

VAR
	i : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO GVL_APP.nAXIS_NUM DO
	IF NOT GVL.astAxes[i].stStatus.bHomed THEN
    	bOutput := FALSE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="LightShutterSystemStates">
      <LineId Id="128" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="1554" Count="0" />
      <LineId Id="1016" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="1632" Count="0" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1642" Count="0" />
      <LineId Id="1752" Count="0" />
      <LineId Id="1212" Count="1" />
      <LineId Id="1221" Count="0" />
      <LineId Id="1571" Count="0" />
      <LineId Id="1565" Count="0" />
      <LineId Id="733" Count="0" />
      <LineId Id="1567" Count="0" />
      <LineId Id="1569" Count="1" />
      <LineId Id="1566" Count="0" />
      <LineId Id="1573" Count="1" />
      <LineId Id="734" Count="0" />
      <LineId Id="736" Count="3" />
      <LineId Id="1557" Count="3" />
      <LineId Id="1556" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="1339" Count="0" />
      <LineId Id="1555" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="1215" Count="2" />
      <LineId Id="241" Count="0" />
      <LineId Id="384" Count="3" />
      <LineId Id="429" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="1455" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="1548" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="561" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="320" Count="3" />
      <LineId Id="56" Count="2" />
      <LineId Id="255" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="490" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="215" Count="2" />
      <LineId Id="509" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="1547" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="259" Count="1" />
      <LineId Id="262" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="1457" Count="0" />
      <LineId Id="1456" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="626" Count="3" />
      <LineId Id="624" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="1709" Count="1" />
      <LineId Id="1712" Count="0" />
      <LineId Id="1714" Count="2" />
      <LineId Id="1711" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="1562" Count="1" />
      <LineId Id="1444" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="1593" Count="0" />
      <LineId Id="1609" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="391" Count="3" />
      <LineId Id="200" Count="1" />
      <LineId Id="564" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="1026" Count="0" />
      <LineId Id="1549" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="267" Count="4" />
      <LineId Id="1099" Count="0" />
      <LineId Id="1620" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="1739" Count="0" />
      <LineId Id="1580" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="1203" Count="0" />
      <LineId Id="1577" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1636" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="274" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="1449" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="1452" Count="0" />
      <LineId Id="1438" Count="1" />
      <LineId Id="1341" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="1440" Count="1" />
      <LineId Id="167" Count="4" />
      <LineId Id="162" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="280" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="1248" Count="0" />
      <LineId Id="1741" Count="1" />
      <LineId Id="1745" Count="0" />
      <LineId Id="1743" Count="0" />
      <LineId Id="1748" Count="0" />
      <LineId Id="1746" Count="0" />
      <LineId Id="1744" Count="0" />
      <LineId Id="1249" Count="0" />
      <LineId Id="1729" Count="0" />
      <LineId Id="1727" Count="0" />
      <LineId Id="1749" Count="0" />
      <LineId Id="905" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="282" Count="2" />
      <LineId Id="1453" Count="0" />
      <LineId Id="497" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="205" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="1250" Count="0" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1251" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="325" Count="4" />
      <LineId Id="319" Count="0" />
      <LineId Id="1550" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="331" Count="4" />
      <LineId Id="341" Count="0" />
      <LineId Id="337" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="344" Count="2" />
      <LineId Id="353" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="315" Count="1" />
      <LineId Id="103" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="317" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="1561" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actCascadeClosing">
      <LineId Id="15" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="1" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actCascadeHoming">
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actCascadeOpening">
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="40" Count="5" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actCascadePower">
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actFaults">
      <LineId Id="16" Count="1" />
      <LineId Id="1" Count="12" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actInitAxis">
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actOpenToOpen">
      <LineId Id="15" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actPositionSwitches">
      <LineId Id="19" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actPower">
      <LineId Id="11" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actRunMethods">
      <LineId Id="2" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.actSavePos">
      <LineId Id="25" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkAllDisabled">
      <LineId Id="40" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkAxesDone">
      <LineId Id="40" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkClosedLimitSwitches">
      <LineId Id="77" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkEnabled">
      <LineId Id="26" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkOpenToOpen">
      <LineId Id="98" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkPos">
      <LineId Id="77" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkResetZero">
      <LineId Id="98" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="LightShutterSystemStates.checkVirtualHomed">
      <LineId Id="26" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="23" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>